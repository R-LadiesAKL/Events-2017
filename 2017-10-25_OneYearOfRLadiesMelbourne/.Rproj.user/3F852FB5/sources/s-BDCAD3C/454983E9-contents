---
title: "Compare Screening vs Cycle 1 for refractory patients"
author: "Anna Quaglieri"
output: html_document
date: <`r format(Sys.time(), "%d %B, %Y")`>
---

```{r prompt=F,echo=F,include=F,eval=T,message=FALSE}

list.of.packages <- c("ggplot2", "cowplot","viridis","dplyr","reshape2","Rsubread","GenomicRanges","data.table","COUNT","cowplot","plotly","pheatmap","d3heatmap","corrplot","tidyr","RColorBrewer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos="http://cran.rstudio.com/")

library(ggplot2)
library(cowplot)
library(viridis)
library(dplyr)
library(Glimma)
library(reshape2)
require(Rsubread)
require(GenomicRanges)
require(data.table)
require(COUNT)
require(cowplot)
library(plotly)
library(pheatmap)
library(d3heatmap)
library(corrplot)
library(tidyr)
library(RColorBrewer)
library("FactoMineR")
library("factoextra")
library(edgeR)
require(Rsubread)
library(readr)
library(EGSEA)
library(png)
library(grid)
library(gridExtra)
library(ggrepel)
# brewer.pal(3, name="RdYlBu")


# Chunk options
knitr::opts_chunk$set(fig.width=8, fig.height=6, echo=F, warning=FALSE, message=FALSE,prompt=T,tidy=T,include=TRUE,cache=TRUE)
```


```{r echo=FALSE}
# Get Counts with FeatureCounts 
local <- TRUE

dir <- ifelse(local,"/Volumes/AML_PROJECT/venetoclax_trial","/wehisan/general/user_managed/grpu_majewski_3/venetoclax_trial")
mydir <- ifelse(local,"/Volumes/Anna's\ UNIX\ Home\ area/PHD_project/GEO_Leucegene_data","/home/users/allstaff/quaglieri.a/PHD_project/GEO_Leucegene_data")

# Load GO terms
# NCBI annotation
genomedir <- file.path(mydir,"genomes/ncbi_annotation")
ncbi <- read.delim(gzfile(file.path(genomedir,"Homo_sapiens.gene_info_07-09-2017.gz")))

```

# Read in data

```{r include=FALSE, echo=FALSE}
geneFC <- readRDS("../../GRCh38_aligned/aligned_pass2_merged_runs/featureCounts/GRCh38_venetoclax_geneCounts_inbuiltAnn.rds")
info_status <- read_csv("../../data_infos/samples_infos.csv")

# Read Fcounts - Inbuilt Annotation
geneFC$SampleName <- gsub("_merged_Dupl_rg.bam", "",
                  gsub("X.wehisan.general.user_managed.grpu_majewski_3.venetoclax_trial.GRCh38_aligned.aligned_pass2_merged_runs.","",geneFC$targets)) 

colnames(geneFC$counts) <- as.character(geneFC$SampleName)
counts <- geneFC$counts

```

```{r include= FALSE, eval = FALSE}
# Create DGE lists
# GTF
match_infos <- match(as.character(colnames(geneFC$counts)),info_status$SampleName)
dge_all <- DGEList(as.matrix(geneFC$counts),genes = geneFC$annotation,samples = info_status[match_infos,])
dim(dge_all)

# Connect with gene Symbol
x <- match(dge_all$genes$GeneID,ncbi$GeneID)
dge_all$genes <- cbind(dge_all$genes, ncbi[x,c("Symbol","description","type_of_gene","Other_designations")])
dim(dge_all)
sum(is.na(dge_all$genes$GeneID))
sum(is.na(dge_all$genes$Symbol))

# Duplicated symbols
ncbi[ncbi$Symbol=="FAM231A",]
dge_all <- dge_all[dge_all$genes$Symbol != "FAM231A" & dge_all$genes$GeneID != "102723383",]
# only one : FAM231A
# Extract gene feature from exone-like features
dge_all$genes$Chr <- sapply(strsplit(dge_all$genes$Chr, split = ";"), function(x) x[[1]])
dge_all$genes$Start <- sapply(strsplit(dge_all$genes$Start, split = ";"), function(x) x[[1]])
dge_all$genes$End <- sapply(strsplit(dge_all$genes$End, split = ";"), function(x) x[[length(x)]])
dge_all$genes$Strand <- sapply(strsplit(dge_all$genes$Strand, split = ";"), function(x) x[[1]])

dge_all$samples$outcome <- sapply(strsplit(dge_all$samples$SampleName, split = "\\."), function(x) x[[4]])

dge_all <- dge_all[!is.na(dge_all$genes$Symbol),]
```


```{r eval =FALSE}
#- Save RDS
saveRDS(dge_all, file.path("01-screening_vs_cycle1_refractory_data","dgeList_full_venetoclax.rds"))
```

## Genes filtering

- Only refractory patients: screening vs Cycle 1

```{r}
dge_all <- readRDS(file.path("01-screening_vs_cycle1_refractory_data","dgeList_full_venetoclax.rds"))

dge_ref <- dge_all[,(dge_all$samples$outcome == "Refr") & (dge_all$samples$Time == "Screen" | dge_all$samples$Time == "Cyc1")]
dge <- dge_ref
```


```{r prompt=T, eval = TRUE, include=TRUE,echo=TRUE}
countsdge <- data.frame(counts = colSums(dge$counts), samples = names(colSums(dge$counts)))
ggplot(countsdge, aes(x=samples,y=counts)) + geom_bar(stat="identity") + coord_flip()

CPM <- edgeR::cpm(dge)
median(CPM)

# CPM for every library size
cpm_bylibsize <- sapply(colSums(dge$counts), function(x) edgeR::cpm(10,lib.size = x))
plot(colSums(dge$counts),cpm_bylibsize, type = "n", main = "CPM 10 by Library sizes", xlab = "LibSize", ylab = "CPM 10")
text(colSums(dge$counts),cpm_bylibsize, labels = colnames(dge$counts))

# threshold
threshold <- as.numeric(edgeR::cpm(10,mean(colSums(dge$counts))))
threshold
abline(h=threshold)

repl_n <- min(table(dge$samples$Time))

dge.newt <- dge[rowSums(CPM >= threshold) > repl_n,]
dim(dge.newt)

dge.new <- dge.newt

(nrow(dge) - nrow(dge.new))/nrow(dge)

dge.initial <- dge
dge <- dge.new
```

## MDS plots

```{r fig.width=7, fig.height=7}

# Data exploration and MDS plots
# Initial MDS
targets1 <- factor(dge$samples$Time)
levels(targets1) <- c("#d94801","#2c7fb8","purple","yellow") 
targets2 <- factor(dge$samples$gender)
levels(targets2) <- c("#d94801","#2c7fb8")
dge$samples$perc_blast_break <- cut(dge$samples$perc_blast,breaks=c(0,30,60,90),include.lowest = TRUE,labels=c("0-30","30-60","60-90"))
targets3 <- factor(dge$samples$perc_blast_break)
levels(targets3) <- c("#d94801","#2c7fb8","purple")

time <- as.factor(dge$samples$Time)
patient <- as.factor(dge$samples$Patient)
design <- model.matrix(~ time)

par(mfrow=c(2,2))
logCPM <- cpm(dge, log=TRUE, prior.count = 0.5)
logCPM.bc <- removeBatchEffect(logCPM, design=design, batch=as.factor(sapply(strsplit(as.character(colnames(logCPM)),split="\\."),function(x) x[2])))
plotMDS(logCPM.bc, col=as.character(targets1),ndim=5,main="MDS correcting for patient-specific effect",cex=0.7)
legend("topleft",legend = levels(factor(dge$samples$Time)),col = levels(targets1),pch=c(16,16),cex=0.8)

plotMDS(logCPM.bc, col=as.character(targets2),ndim=5,main="MDS correcting for patient-specific effect",cex=0.7)
legend("topleft",legend = levels(factor(dge$samples$gender)),col = levels(targets2),pch=c(16,16),cex=0.8)

plotMDS(logCPM.bc, col=as.character(targets3),ndim=5,main="MDS correcting for patient-specific effect",cex=0.7)
legend("topleft",legend = levels(factor(dge$samples$perc_blast_break)),col = levels(targets3),pch=c(16,16),cex=0.8)

```

## RLE plots

```{r rle_plots_all_combined, eval=TRUE,include = TRUE, fig.width=10,fig.height=12,echo=FALSE}

boxplotSample <- function(dge,RLE=TRUE,raw=FALSE,samples_infos=samples_infos){
  
  library(edgeR)
  library(dplyr)
  library(tidyr)
  
  #combined_nozero_filter <- count_matrix[apply(count_matrix,1,zero_prop) < 0.7,]
  #combined_nozero_filter <- as.matrix(combined_nozero_filter)
  log2CPM <- cpm(dge,log = TRUE)
  
  # Compute RLE
  log2RLE <- t(apply(log2CPM,1,function(z){z - median(z)}))
  log2CPM_reshape <- data.frame(log2CPM=c(log2RLE),SampleName=rep(colnames(log2RLE),each=nrow(log2RLE)))

  ave_table1 <- data.frame(log2CPM_reshape %>% group_by(SampleName) %>% 
                             
                          dplyr::summarise(Median=round(median(log2CPM),3),
                                          Mean=round(mean(log2CPM),3),
                                          FirstQuartile=round(quantile(log2CPM,c(0.25)),3),
                                          ThirdQuartile=round(quantile(log2CPM,c(0.75)),3),
                                          Max=round(max(log2CPM),3),
                                          Min=round(min(log2CPM),3),
                                          StDev=round(sd(log2CPM),3),
                                          IQR_log2=IQR(log2CPM),
                                          Min_tukey=min(log2CPM[log2CPM >= (FirstQuartile - 1.5*IQR_log2)]),
                                          Max_tukey=max(log2CPM[log2CPM <= (ThirdQuartile + 1.5*IQR_log2)])))
    
  ave_table1 <- ave_table1[order(ave_table1$SampleName),]
  ave_table1$order_sample <- rep(seq(1,nrow(ave_table1)))
  ave_table1$order_sample <- factor(ave_table1$order_sample,labels=ave_table1$SampleName)
  ave_table1 <- merge(ave_table1,samples_infos)
  
  return(ave_table1)
}

# compute RLE
rle_trimmed <- boxplotSample(dge,RLE=TRUE, raw = FALSE,samples_infos = dge$samples)

# by libsize 
rle_trimmed <- rle_trimmed[order(rle_trimmed$lib.size),]
rle_trimmed$order_sample <- rep(seq(1,nrow(rle_trimmed)))
rle_trimmed$order_sample <- factor(rle_trimmed$order_sample,labels=rle_trimmed$SampleName)

ggplot(rle_trimmed,aes(x=order_sample,lower=FirstQuartile, upper=ThirdQuartile, middle=Median, ymin=Min_tukey, ymax=Max_tukey,fill=Time)) + geom_boxplot(stat="identity") + 
  theme(text = element_text(size=30),legend.position="bottom",axis.text.x=element_blank(),axis.ticks.x = element_blank(),panel.grid.minor = element_blank(),panel.grid.major = element_blank()) + geom_hline(yintercept = 0, linetype = "dotted", colour = "white") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+coord_flip()
```

## Biological cofficient of variation

```{r echo=T, eval = TRUE, include=TRUE,echo =TRUE}
dge <- calcNormFactors(dge,method="TMM")
dge$samples[,1:3]
```

- RLE plot after TMM

```{r echo=F, include=TRUE}
# compute RLE after norm factor
rle_trimmed <- boxplotSample(dge,RLE=TRUE, raw = FALSE,samples_infos = dge$samples)

# by libsize 
rle_trimmed <- rle_trimmed[order(rle_trimmed$lib.size),]
rle_trimmed$order_sample <- rep(seq(1,nrow(rle_trimmed)))
rle_trimmed$order_sample <- factor(rle_trimmed$order_sample,labels=rle_trimmed$SampleName)

ggplot(rle_trimmed,aes(x=order_sample,lower=FirstQuartile, upper=ThirdQuartile, middle=Median, ymin=Min_tukey, ymax=Max_tukey,fill=Time)) + geom_boxplot(stat="identity") + 
  theme(text = element_text(size=30),legend.position="bottom",axis.text.x=element_blank(),axis.ticks.x = element_blank(),panel.grid.minor = element_blank(),panel.grid.major = element_blank()) + geom_hline(yintercept = 0, linetype = "dotted", colour = "white") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+coord_flip()
```

- Compute BCV and define design matrix

```{r echo=T, eval = TRUE, include=TRUE}
dge_sexEf <- dge[!(dge$genes$Chr %in% "Y") & !(dge$genes$Symbol %in% "XIST"),]
dge_noHBB <- dge[!(dge$genes$Symbol %in% "HBB") & !(dge$genes$Symbol %in% "HBA2"),]
dge_noHBB_noYXIST <- dge[!(dge$genes$Symbol %in% "HBB") & !(dge$genes$Symbol %in% "HBA2") & !(dge$genes$Chr %in% "Y") & !(dge$genes$Symbol %in% "XIST"),]

time <- as.factor(dge$samples$Time)
patient <- as.factor(dge$samples$Patient)
design <- model.matrix(~ time + patient)
dge1 <- dge
dge <- estimateDisp(dge1,design)
dge_rob <- estimateDisp(dge1,design,robust = T)
dge_sexEf <- estimateDisp(dge_sexEf,design,robust = T)
dge_noHBB <- estimateDisp(dge_noHBB,design,robust = T)
dge_noHBB_noYXIST <- estimateDisp(dge_noHBB_noYXIST,design,robust = T)

sqrt(dge$common.dispersion)
sqrt(dge_rob$common.dispersion)
sqrt(dge_sexEf$common.dispersion)
sqrt(dge_noHBB$common.dispersion)
sqrt(dge_noHBB_noYXIST$common.dispersion)

```

```{r include=F,fig.height=5,fig.width=9}
par(mfrow = c(2,2))
plotBCV(dge,main="Time + Patient ID")
highAverage_highBCV <- which(dge$AveLogCPM > 6.5 & sqrt(dge$tagwise.dispersion) > 0.9)
points(x = dge$AveLogCPM[highAverage_highBCV], y = sqrt(dge$tagwise.dispersion[highAverage_highBCV]),col = "#fc8d62", pch = 20)
text(x = dge$AveLogCPM[highAverage_highBCV], y = sqrt(dge$tagwise.dispersion[highAverage_highBCV]),
labels = dge$genes$Symbol[highAverage_highBCV], col = "#fc8d62", pos = 2,cex = 0.6)

plotBCV(dge_rob,main="Time + Patient ID + Robust option")
highAverage_highBCV <- which(dge_rob$AveLogCPM > 6.5 & sqrt(dge_rob$tagwise.dispersion) > 0.9)
points(x = dge_rob$AveLogCPM[highAverage_highBCV], y = sqrt(dge_rob$tagwise.dispersion[highAverage_highBCV]),col = "#fc8d62", pch = 20)
text(x = dge_rob$AveLogCPM[highAverage_highBCV], y = sqrt(dge_rob$tagwise.dispersion[highAverage_highBCV]),
labels = dge_rob$genes$Symbol[highAverage_highBCV], col = "#fc8d62", pos = 2,cex = 0.6)


par(mfrow = c(1,2))

plotBCV(dge_sexEf,main="Time + Patient ID + Robust option + without Y genes and XIST")
highAverage_highBCV <- which(dge_sexEf$AveLogCPM > 6.5 & sqrt(dge_sexEf$tagwise.dispersion) > 0.9)
points(x = dge_sexEf$AveLogCPM[highAverage_highBCV], y = sqrt(dge_sexEf$tagwise.dispersion[highAverage_highBCV]),col = "#fc8d62", pch = 20)
text(x = dge_sexEf$AveLogCPM[highAverage_highBCV], y = sqrt(dge_sexEf$tagwise.dispersion[highAverage_highBCV]),
labels = dge_sexEf$genes$Symbol[highAverage_highBCV], col = "#fc8d62", pos = 2,cex = 0.6)

plotBCV(dge_noHBB_noYXIST,main="Time + Patient ID + Robust option + without HBB,HB2A and sex genes")
highAverage_highBCV <- which(dge_noHBB_noYXIST$AveLogCPM > 6.5 & sqrt(dge_noHBB_noYXIST$tagwise.dispersion) > 0.9)
points(x = dge_noHBB_noYXIST$AveLogCPM[highAverage_highBCV], y = sqrt(dge_noHBB_noYXIST$tagwise.dispersion[highAverage_highBCV]),col = "#fc8d62", pch = 20)
text(x = dge_noHBB_noYXIST$AveLogCPM[highAverage_highBCV], y = sqrt(dge_noHBB_noYXIST$tagwise.dispersion[highAverage_highBCV]),
labels = dge_noHBB_noYXIST$genes$Symbol[highAverage_highBCV], col = "#fc8d62", pos = 2,cex = 0.6)

```

## Differential expression analysis

I will perform a DE using patient ID as covariate since we have paired sample (paired t-test will be performed). I will exclude XIST and genes on chrY 

#### Voom

```{r,echo=T,include=T}
dge <- dge_sexEf

dge$samples$Time <- factor(dge$samples$Time,levels=c("Screen","Cyc1"))

time <- as.factor(dge$samples$Time)
gender <- as.factor(dge$samples$gender)
patient <- as.factor(dge$samples$Patient)
design <- model.matrix(~ time + patient + dge$samples$perc_blast)

#rownames(dge) <- dge$genes$GeneID

v <- voom(dge,design,plot=T,normalize="quantile")
vwts <- voomWithQualityWeights(dge, design=design, normalization="quantile", plot=TRUE,main="With array weights")
```


## Results 

1. Decide Test without array weigths

```{r include=T,echo=T,prompt=T}
fit <- lmFit(v,design = design)
fit <- eBayes(fit)
fitw <- lmFit(vwts,design = design)
fitw <- eBayes(fitw)

# DecideTest without weights
summary(decideTests(fit))[,1:3]
decide_test <- decideTests(fit)
```

2. Decide Test with array weigths

```{r fig.height=15,fig.width=15,include=T,echo=T}
summary(decideTests(fitw))[,1:3]
decide_test <- decideTests(fitw)
```

3. Top Table without array weigths

```{r fig.height=15,fig.width=15,include=T,echo=T}
# summary(decideTests(fitw))
top <- topTable(fit, coef = "timeCyc1", n = Inf)
top <- top[order(top$adj.P.Val, decreasing = FALSE),]
top$rank <- 1:nrow(top)
top[1:15,]
```

4. Top Table with array weigths

```{r fig.height=15,fig.width=15,include=T,echo=T}
top_aw <- topTable(fitw, coef = "timeCyc1", n = Inf)
top_aw <- top_aw[order(top_aw$adj.P.Val, decreasing = FALSE),]
top_aw[1:15,]
```


```{r heatmap_top_30,fig.height=15,fig.width=15,include=T}
# Save all the data
list_data <- list(top=top,
                  dge=dge, 
                  dge.unfiltered=dge.initial,
                  voom=v,
                  fit=fit) 
saveRDS(list_data, file.path("01-screening_vs_cycle1_refractory_data","Cycle1_vs_Screen_refr.rds"))
write.csv(top,file.path("01-screening_vs_cycle1_refractory_data","Cycle1_vs_Screen_refr.csv"))

# Negative Control genes for RUV
nctl <- as.character(top[(nrow(top) - 500):nrow(top),"Symbol"])

# Heatmap
topgenes <- top_aw$GeneID[1:30]
i <- which(vwts$genes$GeneID %in% topgenes)
col.response <- c("purple","orange")[as.numeric(as.factor(dge$samples$Time))]
# screen is orange and cycle 1 is purple

coolmap(vwts$E[i,], cluster.by="de pattern", col=NULL,
        linkage.row="complete", linkage.col="complete", show.dendrogram="both",
        labCol=sapply(strsplit(as.character(vwts$targets$SampleName),split="\\."),function(x) paste(x[1:3],collapse = ".")),labRow = vwts$genes$Symbol[i], ColSideColors = col.response,main="Cyc1 vs Screen in Refractory",margins=c(10,6))
```


```{r fig.height=15,fig.width=15,include=T,echo=T}
# Volcano plot
rownames(dge) <- dge$genes$Symbol
glXYPlot(x = fit$coefficients[,2], y = fit$lods[,2],
          xlab="logFC", ylab="B", main="",
          counts = cpm(dge$counts, log = TRUE), groups = v$targets$Time,
         status = decide_test[,2],
          anno = dge$genes, id.column = "Symbol", folder = "01-screening_vs_cycle1_refractory_Glimma_plots",html = "cyc1_vs_Screen_refractory", launch = FALSE)
```

Volcano plot

```{r echo=TRUE}
min(top_aw$adj.P.Val)
```


```{r volcano_plot,fig.height=7,fig.width=7,include=T,echo=T}
top_aw$DEG <- ifelse(top_aw$adj.P.Val < 0.05 & top_aw$logFC > log2(2), "Up",ifelse(top_aw$adj.P.Val < 0.05  & top_aw$logFC < -log2(2),"Down","notDE"))
ggplot(top_aw,aes(x=logFC,y=-log10(P.Value),colour=DEG)) + 
  geom_point(alpha=0.6) +
  geom_vline(xintercept = c(-log2(2),log2(2)),linetype="dotted")  + scale_color_manual(values = c("blue","grey","red")) +
  geom_text(data=subset(top_aw,DEG != "notDE" | -log10(top_aw$P.Value) > 3.5 ),aes(x=logFC,y=-log10(P.Value),colour=DEG,label=Symbol),nudge_y=0.5) +
  theme(legend.position = "bottom") + ggtitle("Cyc1 vs Screen")

```

\clearpage

## BCL2 family of genes

```{r}
hox_paper <- read_csv("/Volumes/AML_PROJECT/venetoclax_trial/data_infos/hox_genes_paper.csv")
bcl2_genes <- subset(hox_paper,Family %in% "BCL2family")
bcl2_genes <- bcl2_genes[order(bcl2_genes$Symbol),]
bcl2_genes

# Update symbol
updateSymbol <- data.frame(UpdateSymbol=as.character(alias2SymbolTable(bcl2_genes$Symbol,species = "Hs")),
                           Symbol=as.character(bcl2_genes$Symbol))
updateSymbol$UpdateSymbol <- as.character(updateSymbol$UpdateSymbol)
updateSymbol$Symbol <- as.character(updateSymbol$Symbol)
toUpdate <- which(updateSymbol$UpdateSymbol != updateSymbol$Symbol)


# hox genes
hoxgenes <- subset(hox_paper,Family %in% "HOXFamily")
# Update symbol
updateSymbol <- data.frame(UpdateSymbol=as.character(alias2SymbolTable(hoxgenes$Symbol,species = "Hs")),
                           Symbol=as.character(hoxgenes$Symbol))
updateSymbol$UpdateSymbol <- as.character(updateSymbol$UpdateSymbol)
updateSymbol$Symbol <- as.character(updateSymbol$Symbol)
toUpdate <- which(updateSymbol$UpdateSymbol != updateSymbol$Symbol)

```


```{r bcl2_family_heatmap,fig.height=9,fig.width=8}

# heatmap with Normalised expression values
vwts <- vwts[,order(vwts$targets$Patient)]
vwts$targets$SampleName_order <- factor(vwts$targets$SampleName,levels=c(vwts$targets$SampleName))
col.response <- c("purple","orange")[as.numeric(as.factor(vwts$targets$Time))]
genes <- top_aw$GeneID[top_aw$Symbol %in% unique(bcl2_genes$Symbol)]
i <- which(vwts$genes$GeneID %in% genes)

coolmap(vwts$E[i,], col=NULL,
        linkage.row="complete", linkage.col="none",show.dendrogram="row",
        labCol=sapply(strsplit(as.character(vwts$targets$SampleName_order),split="\\."), function(x) paste(x[2:3],collapse=".")),labRow = vwts$genes$Symbol[i], ColSideColors = col.response, main="Cyc1 vs Screen (Limma results)",margin=c(10,7))
```


```{r bcl2_family_heatmap_rpkm,fig.height=9,fig.width=8}
# heatmap with RPKM
dge <- dge[,order(dge$samples$Patient)]
dge$samples$SampleName_order <- factor(dge$samples$SampleName,levels=c(dge$samples$SampleName))
col.response <- c("purple","orange")[as.numeric(as.factor(dge$samples$Time))]

RPKM <- rpkm(dge,gene.length = dge$genes$Length,log = TRUE)
RPKM <- RPKM[rownames(RPKM) %in% unique(bcl2_genes$Symbol),]

coolmap(RPKM, col=NULL,
        linkage.row="complete", linkage.col="none",show.dendrogram="row",
        labCol=sapply(strsplit(as.character(dge$samples$SampleName_order),split="\\."), function(x) paste(x[2:3],collapse=".")),labRow = rownames(RPKM), ColSideColors = col.response, main="Cyc1 vs Screen (RPKM)",margin=c(10,7))
```


```{r bcl2_family_heatmap_cpm,fig.height=9,fig.width=8}
# heatmap with raw counts
CPM <- rpkm(dge,log = TRUE)
CPM <- CPM[rownames(CPM) %in% unique(bcl2_genes$Symbol),]

coolmap(CPM, col=NULL,
        linkage.row="complete", linkage.col="none",show.dendrogram="row",
        labCol=sapply(strsplit(as.character(dge$samples$SampleName_order),split="\\."), function(x) paste(x[2:3],collapse=".")),labRow = rownames(CPM), ColSideColors = col.response, main="Cyc1 vs Screen (CPM)",margin=c(10,7))


```

# EGSEA

```{r eval=FALSE,echo=TRUE}
source("../../../quaglieri.a/RNA-seq-variant-calling/functions/to_make_EGSEA_KEGG_buildIdx_work.R")

rownames(dge) <- dge$genes$GeneID
design <- model.matrix(~ 0+dge$samples$Time + as.factor(dge$samples$Patient) + dge$samples$perc_blast)
colnames(design) <- c("Screen","Cycle1",paste0("S",levels(as.factor(dge$samples$Patient))[-6]),"perc_blast")
contrast.matrix <- makeContrasts(Screen-Cycle1, levels=design)
v <- voom(dge,design,plot=T,normalize="quantile")
fit <- lmFit(v,design = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
```

- Run EGSEA with different gene sets methods

```{r eval = FALSE,echo=TRUE}
gs.annots = buildIdx(entrezIDs = rownames(v$E), species = "human",msigdb.gsets = "c5", kegg.exclude = c("Metabolism"))

gsa = egsea(voom.results = v, contrasts = contrast.matrix, gs.annots = gs.annots,
            symbolsMap = v$genes, baseGSEAs = c("fry","roast","camera"), egsea.dir = "01-screening_vs_cycle1_refractory_EGSEA",
            sort.by = "avg.rank", num.threads = 4, report = TRUE)
```

```{r echo=FALSE,include=FALSE}
## Load EGSEA results
#1. Kegg
ranked_kegg_gene_sets_Screen_Cyc1 <- read_delim("01-screening_vs_cycle1_refractory_EGSEA/ranked-gene-sets-base/ranked-kegg-gene-sets-Screen-Cycle1.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
ranked_kegg_gene_sets_Screen_Cyc1[,c("Rank","ID","GeneSet","NumGenes","Type","p.adj","avg.logfc","direction","fry","camera")]
```


```{r echo=FALSE,include=FALSE}
# 2. GO pathways
ranked_c5_gene_sets_Screen_Cyc1 <- read_delim("01-screening_vs_cycle1_refractory_EGSEA/ranked-gene-sets-base/ranked-c5-gene-sets-Screen-Cycle1.txt", 
    "\t", escape_double = FALSE, trim_ws = TRUE)
ranked_c5_gene_sets_Screen_Cyc1
```

\clearpage

# RUV-Inv

```{r echo=TRUE}
# install.packages("ruv")
library(ruv)

# CPM and scale counts to give to RUV
rownames(dge) <- dge$genes$Symbol
gene.info <- rbind(dge$genes$Chr,as.character(dge$genes$Chr))
rownames(gene.info) <- c("chrom","Symbol")
dge$samples$Time <- factor(dge$samples$Time,levels=c("Screen","Cyc1"))

CPM <- t(cpm(dge$counts,log=TRUE))
CPM_center <- scale(CPM, center = TRUE, scale = FALSE)
ruv_refr <- list(Y = CPM_center, 
                  X = cbind(as.numeric(as.factor(dge$samples$Time))-1),
                  Z = cbind(as.numeric(as.factor(dge$samples$Patient))-1),
                  ctl_genes = rownames(dge) %in% nctl,
                  gene.info = gene.info)

ruv_inv <- RUVinv(Y=ruv_refr$Y, X=ruv_refr$X, ctl=ruv_refr$ctl_genes,Z=ruv_refr$Z)
ruv_inv_varAdj <- variance_adjust(ruv_inv, ebayes = TRUE, evar = TRUE, rsvar = TRUE,
bin = 10, rescaleconst = NULL)
```


```{r ruv_results}
#pdf("~/ruv_inv_Refr.pdf",width = 14,height = 14,onefile=TRUE)

########################
# histograms of pvalues
########################

  par(mfrow=c(2,3))
  hist(ruv_inv_varAdj$p.rsvar, main="rsvar")
  hist(ruv_inv_varAdj$p.evar,main="evar")
  hist(ruv_inv_varAdj$p.ebayes,main="ebays")
  hist(ruv_inv_varAdj$p.rsvar.ebayes,main="rsvar ebays")
  hist(ruv_inv$p,main="default")


  ################
  # Volcano plot
  ################
  
  pvals <- c("p.rsvar","p.evar","p.ebayes","p.rsvar.ebayes","p")
  
  par(mfrow=c(2,3))
  
  for(p_type in pvals){
    
    lod=-log10(t(ruv_inv_varAdj[[p_type]])[,1])
    names(lod) <- names(t(ruv_inv_varAdj$betahat)[,1])
    x = t(ruv_inv_varAdj$betahat)[,1]
    status_genes <-  ifelse(ruv_refr$ctl_genes, 1,0) 
    names(status_genes) <- colnames(ruv_refr$Y)
    counts=t(ruv_refr$Y)
  
    iqr_lod <- IQR(lod)  
    plot(x,lod,col="grey",pch=16,main=p_type,xlab="logFC",ylab="-log10Pval")
    points(x[ruv_refr$ctl_genes],lod[ruv_refr$ctl_genes],col="dark red",pch=16)
    #text(x[lod>2.5],lod[lod>2.5],labels = names(lod)[lod>2.5])
  }
    

#dev.off()

```

- RSVAR ebays results

```{r}
# RSvar ebays 
data <- data.frame(logFC=t(ruv_inv_varAdj$betahat),
                   pval=t(ruv_inv_varAdj$p.rsvar.ebayes),
                   adjPval=t(ruv_inv_varAdj$p.rsvar.ebayes.BH),
                   Symbol = rownames(t(ruv_inv_varAdj$betahat)))
data <- data[order(data$pval,decreasing = FALSE),]
head(data)
data[1:20,]
```

- **Choose as DE if adjPval < 0.05 & abs(logFC) > log(2)**

```{r ruv_results_volcano,echo=TRUE,fig.height=9,fig.width=12}
# with BCL2 genes in purple
data$DEG <- ifelse(data$adjPval < 0.05 & data$logFC > log2(2), "Up",ifelse(data$adjPval < 0.05  & data$logFC < -log2(2),"Down","notDE"))
bcl2_text <- subset(data,Symbol %in% c(bcl2_genes$Symbol))
p1=ggplot(data,aes(x=logFC,y=-log10(pval),colour=DEG)) + 
  geom_point(alpha=0.6) +
  geom_vline(xintercept = c(-log2(2),log2(2)),linetype="dotted")  + 
  geom_label_repel(data=subset(data,DEG != "notDE" & -log10(pval) > 4.5),
    aes(x=logFC,y=-log10(pval),colour=DEG,label=Symbol,fill=DEG),
    fontface = 'bold', color = 'white',
    segment.color = 'black',
    label.size = 0.05,show.legend = FALSE) +
  scale_color_manual(values = c("blue","grey","red")) + scale_fill_manual(values = c("blue","red")) +
  geom_text(data=bcl2_text,aes(x=logFC,y=-log10(pval),label=Symbol),colour="purple",nudge_y=0.1) +
  geom_point(data=bcl2_text,aes(x=logFC,y=-log10(pval)),colour="purple")+
  theme_bw() + ggtitle("Cyc1 vs Screen RSVAR-ebays (BCL2 genes purple)")
p1
ggplotly(p1)

# with HOX genes in purple
data$DEG <- ifelse(data$adjPval < 0.05 & data$logFC > log2(2), "Up",ifelse(data$adjPval < 0.05  & data$logFC < -log2(2),"Down","notDE"))
hox_text <- subset(data,Symbol %in% c(hoxgenes$Symbol))
p2=ggplot(data,aes(x=logFC,y=-log10(pval),colour=DEG,label=Symbol)) + 
  geom_point(alpha=0.6) +
  geom_vline(xintercept = c(-log2(2),log2(2)),linetype="dotted")+
  geom_label_repel(data=subset(data,DEG != "notDE" & -log10(pval) > 4.5),
    aes(x=logFC,y=-log10(pval),colour=DEG,label=Symbol,fill=DEG),
    fontface = 'bold', color = 'white',
    segment.color = 'black',
    label.size = 0.05,show.legend = FALSE) +
  scale_color_manual(values = c("blue","grey","red")) + scale_fill_manual(values = c("blue","red")) +
  geom_text(data=hox_text,aes(x=logFC,y=-log10(pval),label=Symbol),colour="purple",nudge_y=0.1) +
  geom_point(data=hox_text,aes(x=logFC,y=-log10(pval)),colour="purple")+
  theme_bw() + ggtitle("Cyc1 vs Screen RSVAR-ebays (HOX genes purple)")
p2
ggplotly(p2)

### HTML version
# with HOX genes in purple
data$DEG <- ifelse(data$adjPval < 0.05 & data$logFC > log2(2), "Up",ifelse(data$adjPval < 0.05  & data$logFC < -log2(2),"Down","notDE"))
p2=ggplot(data,aes(x=logFC,y=-log10(pval),colour=DEG,label=Symbol)) + 
  geom_point(alpha=0.6) +
  geom_vline(xintercept = c(-log2(2),log2(2)),linetype="dotted")+
  geom_text(data=subset(data,DEG != "notDE" & -log10(pval) > 4.5),
    aes(x=logFC,y=-log10(pval),colour=DEG,label=Symbol,fill=DEG)) +
  scale_color_manual(values = c("blue","grey","red")) + 
  geom_text(data=bcl2_text,aes(x=logFC,y=-log10(pval),label=Symbol),colour="purple",nudge_y=0.1) +
  geom_point(data=bcl2_text,aes(x=logFC,y=-log10(pval)),colour="purple")+
    geom_text(data=hox_text,aes(x=logFC,y=-log10(pval),label=Symbol),colour="brown",nudge_y=0.1) +
  geom_point(data=hox_text,aes(x=logFC,y=-log10(pval)),colour="brown")+
  theme_bw() + ggtitle("Cyc1 vs Screen RSVAR-ebays (BCL2 & HOX genes in purple & brown)")
p2
htmlwidgets::saveWidget(as.widget(ggplotly(p2)), file="/Volumes/AML_PROJECT/venetoclax_trial/scripts/02-diff_gene_expression/05-DE_report_data/volcano_plot_RefractoryPatientsComparison_BCL2-HOX_Genes.png.html")

```

- Genomic deletion of either C/D box snoRNA SNORD14D or SNORD35A suppressed clonogenic potential of leukaemia cells in vitro and delayed leukaemogenesis in vivo. (\url{https://www.ncbi.nlm.nih.gov/pubmed/28650479}). Makes sense that it is higher at diagnosis

- MIR21 expression level in colorectal carcinoma is associated with worse clinical outcome, and this association is stronger in carcinomas expressing high-level PTGS2, suggesting complex roles of immunity and inflammation in tumor progression. (\url{http://clincancerres.aacrjournals.org/content/early/2016/05/27/1078-0432.CCR-15-2173})

- COL19A1 is higher in normal blood in B-cells (from BloodSpot) - B-cell-specific mutations in nodal T-cell lymphomas - Identification of cell-type-specific mutations in nodal T-cell lymphomas

```{r}
img <- readPNG(file.path("01-screening_vs_cycle1_refractory_data","COL19A1.png"))
grid.raster(img)
```

- SEMA3C 

```{r}
img <- readPNG(file.path("01-screening_vs_cycle1_refractory_data","SEMA3C.png"))
grid.raster(img)
```


```{r echo=TRUE}
# Plot of matrix W
W_df <- data.frame(W = ruv_inv_varAdj$W,SampleName=rownames(CPM_center))
W_df <- merge(W_df,dge$samples)
ggplot(W_df,aes(x=W.1,y=W.2,colour=gender)) + geom_point() + geom_text(aes(label=SampleName))
# blast
W_df <- W_df[order(W_df$perc_blast,decreasing = TRUE),]
W_df$sample_order_blast <- factor(W_df$SampleName,levels=W_df$SampleName)
ggplot(W_df,aes(x=perc_blast,y=W.1)) + 
  geom_smooth(method='lm',se=FALSE,colour="dark red")  + geom_point() 
# ng_ul
ggplot(W_df,aes(x=ng_ul,y=W.1)) + 
  geom_smooth(method='lm',se=FALSE,colour="dark red")  + geom_point() 

pairs(W_df[,c("W.1","W.2","perc_blast","ng_ul","Volume_ml")],pch=16)

lm_blast <- lm(W.1 ~ perc_blast,data=W_df)
summary(lm_blast)

write.csv(W_df,file.path("01-screening_vs_cycle1_refractory_data","Wmatrix_withInfos.csv"),row.names = FALSE)

```

- barcode plot with Limma results

```{r}
top_limma <- read.csv(file.path("01-screening_vs_cycle1_refractory_data","Cycle1_vs_Screen_refr.csv"))

evar <- data

cycle1_up <- subset(evar, adjPval <= 0.05 & logFC > 0)
cycle1_down <- subset(evar, adjPval <= 0.05 & logFC < 0)
index_up_cycle1<- which(top_limma$Symbol %in% cycle1_up$Symbol)
index_down_cycle1 <- which(top_limma$Symbol %in% cycle1_down$Symbol)
barcodeplot(top_limma$t, index_up_cycle1, index_down_cycle1, main = paste0("Refr: Cycle1 vs Screen (RUVinv vs Limma)"))
```

- heatmap with top genes: adjPval < 0.01 & abs(data$logFC) > log2(3)

```{r}
dim(data[data$adjPval < 0.01 & abs(data$logFC) > log2(3),])
highest <- as.character(data[data$adjPval < 0.01 & abs(data$logFC) > log2(3),"Symbol"])

dge <- dge[,order(dge$samples$Patient)]
dge$samples$SampleName_order <- factor(dge$samples$SampleName,levels=c(dge$samples$SampleName))
col.response <- c("purple","orange")[as.numeric(as.factor(dge$samples$Time))]
# screen is purple

CPM <- rpkm(dge,log = TRUE)
CPM <- CPM[rownames(CPM) %in% highest,]

coolmap(CPM, col=NULL,
        linkage.row="complete", linkage.col="none",show.dendrogram="row",
        labCol=sapply(strsplit(as.character(dge$samples$SampleName_order),split="\\."), function(x) paste(x[2:3],collapse=".")),labRow = rownames(CPM), ColSideColors = col.response, main="Cyc1 vs Screen")
```

# GO annotation with top genes from RUV-Inv analysis

```{r}
match_geneID <- match(data$Symbol,dge$genes$Symbol)
data$GeneID <- dge$genes$GeneID[match_geneID]
data <- data %>% arrange(adjPval,desc(abs(logFC)))
head(data)
de <- data[1:100,]
```

```{r}
go_de <- goana(de$GeneID, species = "Hs")
topGO(go_de, n=20)
topGo20 <- topGO(go_de, n=20)
topGo20$GOterm <- rownames(topGo20)
```

```{r}
keggatest_de <- kegga(de$GeneID, species = "Hs")
topKEGG(keggatest_de, n=20)
topKEGG20 <- topKEGG(keggatest_de, n=20)
topKEGG20$PathwayID <- rownames(topKEGG20)
```

```{r}
library(plyr)
# GO
x <- AnnotationDbi::toTable(org.Hs.egGO2ALLEGS)
x <- unique(x[, c("gene_id", "go_id", "Ontology")])
GOterm_sets <- ddply(x, .(go_id), summarise, gene_id = paste(gene_id, collapse = ","), Ontology = paste(Ontology, collapse = ","))
GOterm_sets$Ontology <- strsplit2(GOterm_sets$Ontology, split = ",")[, 1]

# KEGG
y <- getGeneKEGGLinks(species.KEGG = "hsa")
KEGGpathways <- ddply(y, .(PathwayID), summarise, GeneID = paste(GeneID, collapse = ","))

# Function extract gene ids from pathway results
get_geneID <- function(pathway_match, list_GeneID, ncbi = ncbi, kegg = FALSE){
  
  x <- strsplit(as.character(pathway_match[2]), split = ",")[[1]]
  gene_id <- x[x %in% as.character(list_GeneID)]
  names(gene_id) <- ncbi$Symbol[match(gene_id,as.character(ncbi$GeneID))]
  
  if(!kegg){

    if(length(gene_id)==0){
     data_return <- data.frame(GeneID = "noID", 
                              Symbol ="noID", 
                              GOterm = pathway_match[1], Ont = pathway_match[3])} else {
    
    data_return <- data.frame(GeneID = gene_id, 
                              Symbol = names(gene_id), 
                              GOterm = pathway_match[1], Ont = pathway_match[3])}
  }else{
    
    data_return <- data.frame(GeneID = gene_id, 
                  Symbol = names(gene_id), PathwayID = pathway_match[1])
  }
}

# keggs
Kegg_sets_refra <- subset(KEGGpathways,PathwayID %in% topKEGG20$PathwayID)
gene_pathways_KEGG <- apply(Kegg_sets_refra,1,get_geneID,list_GeneID = de$GeneID, ncbi = ncbi,kegg = TRUE)
gene_pathways_KEGG <- do.call(rbind,gene_pathways_KEGG)
gene_pathways_KEGG <- merge(gene_pathways_KEGG,topKEGG20) %>% arrange(P.DE)
head(gene_pathways_KEGG)

# GOs
GO_sets_refra <- subset(GOterm_sets,go_id %in% topGo20$GOterm)
gene_pathways_GO <- apply(GO_sets_refra,1,get_geneID,list_GeneID = de$GeneID, ncbi = ncbi,kegg = FALSE)
gene_pathways_GO <- do.call(rbind,gene_pathways_GO)
gene_pathways_GO <- merge(gene_pathways_GO,topGo20) %>% arrange(P.DE)
head(gene_pathways_GO)
gene_pathways_GO[gene_pathways_GO$Term == "maintenance of permeability of blood-brain barrier",]

```

# Save results

```{r}

write.csv(data,file.path("01-screening_vs_cycle1_refractory_data","RUVInv_RsvarEbays_Cycle_vs_Screen_Refr.csv"),row.names = FALSE)
saveRDS(ruv_inv_varAdj,file.path("01-screening_vs_cycle1_refractory_data","RUVInv_Cycle_vs_Screen_Refr.rds"))
write.csv(gene_pathways_KEGG,file.path("01-screening_vs_cycle1_refractory_data","top100_KEGG_RUVInv_RsvarEbays_Cycle_vs_Screen_Refr.csv"),row.names = FALSE)
write.csv(gene_pathways_GO,file.path("01-screening_vs_cycle1_refractory_data","top100_GO_RUVInv_RsvarEbays_Cycle_vs_Screen_Refr.csv"),row.names = FALSE)

```

